/* ###
 * IP: GHIDRA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Builds a Ghidra Extension for a given Ghidra installation.
//
// An absolute path to the Ghidra installation directory must be supplied either by setting the 
// GHIDRA_INSTALL_DIR environment variable or Gradle project property:
//
//     > export GHIDRA_INSTALL_DIR=<Absolute path to Ghidra> 
//     > gradle
//
//         or
//
//     > gradle -PGHIDRA_INSTALL_DIR=<Absolute path to Ghidra>
//
// Gradle should be invoked from the directory of the project to build.  Please see the
// application.gradle.version property in <GHIDRA_INSTALL_DIR>/Ghidra/application.properties
// for the correction version of Gradle to use for the Ghidra installation you specify.

plugins {
  id("com.diffplug.spotless") version "6.20.0"
  id("com.github.gmazzo.buildconfig") version "5.3.5"
}

//----------------------START "DO NOT MODIFY" SECTION------------------------------
def ghidraInstallDir

if (System.env.GHIDRA_INSTALL_DIR) {
	ghidraInstallDir = System.env.GHIDRA_INSTALL_DIR
}
else if (project.hasProperty("GHIDRA_INSTALL_DIR")) {
	ghidraInstallDir = project.getProperty("GHIDRA_INSTALL_DIR")
}

if (ghidraInstallDir) {
	apply from: new File(ghidraInstallDir).getCanonicalPath() + "/support/buildExtension.gradle"
}
else {
	throw new GradleException("GHIDRA_INSTALL_DIR is not defined!")
}
//----------------------END "DO NOT MODIFY" SECTION-------------------------------

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		name = "boricj's binary-file-toolkit"
		url = uri("https://maven.pkg.github.com/boricj/binary-file-toolkit")
		credentials(HttpHeaderCredentials) {
            name = "Authorization"
            value = "Bearer " + project.findProperty("githubToken") as String ?: System.getenv("GITHUB_TOKEN")
		}
        authentication {
            header(HttpHeaderAuthentication)
        }
	}
}

apply plugin: "jacoco"
apply plugin: "com.diffplug.spotless"

dependencies {
	implementation "net.boricj:bft-base:0.4.0"
	implementation "net.boricj:bft-coff:0.4.0"
	implementation "net.boricj:bft-elf:0.4.0"
	testImplementation "junit:junit:4.12"
  	testRuntimeOnly "junit:junit:4.12"
	testImplementation "org.mockito:mockito-core:5.4.0"
}

test {
	// FIXME: Use @Isolated when junit gets sufficiently upgraded
	forkEvery 1
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

spotless {
	java {
		eclipse().configFile("developer_scripts/GhidraEclipseFormatter.xml")
		toggleOffOn()
		removeUnusedImports()
		target 'src/*/java/**/*.java'
	}
	format("license", {
		licenseHeader("""/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
""", "package ")
		target 'src/*/java/**/*.java'
	})
}

def gitVersionProvider = providers.exec {
	commandLine("git", "describe", "--tags", "--dirty")
}.standardOutput.asText.map { it.trim() }

buildConfig {
	buildConfigField String, "GIT_VERSION", gitVersionProvider
}

// For Java 9, we must explicitly export references to the internal classes we are using.
// We export them to all "unnamed" modules, which are modules that don't define themselves
// as a new Java 9 style module.  Ghidra is currently using unnamed modules everywhere.
tasks.withType(JavaCompile) {
	[
		'java.desktop/sun.awt=ALL-UNNAMED',
		'java.desktop/sun.swing=ALL-UNNAMED',
		'java.desktop/sun.java2d=ALL-UNNAMED'
	].each {
		options.compilerArgs.addAll(['--add-exports', it])
	}
}
